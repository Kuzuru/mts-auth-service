// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/JWTValidation.proto

package JWTValidationService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JWTValidationServiceClient is the client API for JWTValidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JWTValidationServiceClient interface {
	IsTokenVaild(ctx context.Context, in *IsTokenVaildRequest, opts ...grpc.CallOption) (*IsTokenVaildResponse, error)
}

type jWTValidationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJWTValidationServiceClient(cc grpc.ClientConnInterface) JWTValidationServiceClient {
	return &jWTValidationServiceClient{cc}
}

func (c *jWTValidationServiceClient) IsTokenVaild(ctx context.Context, in *IsTokenVaildRequest, opts ...grpc.CallOption) (*IsTokenVaildResponse, error) {
	out := new(IsTokenVaildResponse)
	err := c.cc.Invoke(ctx, "/JWTValidation.JWTValidationService/IsTokenVaild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTValidationServiceServer is the server API for JWTValidationService service.
// All implementations must embed UnimplementedJWTValidationServiceServer
// for forward compatibility
type JWTValidationServiceServer interface {
	IsTokenVaild(context.Context, *IsTokenVaildRequest) (*IsTokenVaildResponse, error)
	mustEmbedUnimplementedJWTValidationServiceServer()
}

// UnimplementedJWTValidationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJWTValidationServiceServer struct {
}

func (UnimplementedJWTValidationServiceServer) IsTokenVaild(context.Context, *IsTokenVaildRequest) (*IsTokenVaildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTokenVaild not implemented")
}
func (UnimplementedJWTValidationServiceServer) mustEmbedUnimplementedJWTValidationServiceServer() {}

// UnsafeJWTValidationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JWTValidationServiceServer will
// result in compilation errors.
type UnsafeJWTValidationServiceServer interface {
	mustEmbedUnimplementedJWTValidationServiceServer()
}

func RegisterJWTValidationServiceServer(s grpc.ServiceRegistrar, srv JWTValidationServiceServer) {
	s.RegisterService(&JWTValidationService_ServiceDesc, srv)
}

func _JWTValidationService_IsTokenVaild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTokenVaildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTValidationServiceServer).IsTokenVaild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JWTValidation.JWTValidationService/IsTokenVaild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTValidationServiceServer).IsTokenVaild(ctx, req.(*IsTokenVaildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JWTValidationService_ServiceDesc is the grpc.ServiceDesc for JWTValidationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JWTValidationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JWTValidation.JWTValidationService",
	HandlerType: (*JWTValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsTokenVaild",
			Handler:    _JWTValidationService_IsTokenVaild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/JWTValidation.proto",
}
